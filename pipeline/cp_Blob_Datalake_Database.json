{
	"name": "cp_Blob_Datalake_Database",
	"properties": {
		"description": "this pipeline copies data from datalake to blob data storage",
		"activities": [
			{
				"name": "Blob_to_DataLake",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "lkpStorageDetails",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "ParquetSource",
						"storeSettings": {
							"type": "AzureBlobStorageReadSettings",
							"recursive": true,
							"wildcardFileName": "*.parquet",
							"enablePartitionDiscovery": false
						}
					},
					"sink": {
						"type": "ParquetSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings",
							"copyBehavior": "MergeFiles"
						},
						"formatSettings": {
							"type": "ParquetWriteSettings"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "Parquet_blocks",
						"type": "DatasetReference",
						"parameters": {
							"containerName": {
								"value": "@string(activity('lkpStorageDetails').output.value[0]['container_name'])",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "Parquet1",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "lkpStorageDetails",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "select container_name from storage where type='sablob10001';",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "Generic_Db_Dataset",
						"type": "DatasetReference",
						"parameters": {
							"TableName": {
								"value": "@pipeline().parameters.storage_table",
								"type": "Expression"
							}
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "lkpStorageDataLake",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Blob_to_DataLake",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "select container_name from storage where type='sadatalake1001';",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "Generic_Db_Dataset",
						"type": "DatasetReference",
						"parameters": {
							"TableName": {
								"value": "@pipeline().parameters.storage_table",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "cp_Datalake_to_Database",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "lkpStorageDataLake",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "ParquetSource",
						"storeSettings": {
							"type": "AzureBlobFSReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						}
					},
					"sink": {
						"type": "AzureSqlSink",
						"writeBehavior": "upsert",
						"upsertSettings": {
							"useTempDB": true,
							"keys": [
								"number"
							]
						},
						"sqlWriterUseTableLock": false,
						"tableOption": "autoCreate",
						"disableMetricsCollection": false
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"name": "number",
									"type": "Int64",
									"physicalType": "INT64"
								},
								"sink": {
									"name": "number",
									"type": "Int64",
									"physicalType": "bigint"
								}
							},
							{
								"source": {
									"name": "hash",
									"type": "String",
									"physicalType": "UTF8"
								},
								"sink": {
									"name": "hash",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "parent_hash",
									"type": "String",
									"physicalType": "UTF8"
								},
								"sink": {
									"name": "parent_hash",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "nonce",
									"type": "String",
									"physicalType": "UTF8"
								},
								"sink": {
									"name": "nonce",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "sha3_uncles",
									"type": "String",
									"physicalType": "UTF8"
								},
								"sink": {
									"name": "sha3_uncles",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "logs_bloom",
									"type": "String",
									"physicalType": "UTF8"
								},
								"sink": {
									"name": "logs_bloom",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "transactions_root",
									"type": "String",
									"physicalType": "UTF8"
								},
								"sink": {
									"name": "transactions_root",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "state_root",
									"type": "String",
									"physicalType": "UTF8"
								},
								"sink": {
									"name": "state_root",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "receipts_root",
									"type": "String",
									"physicalType": "UTF8"
								},
								"sink": {
									"name": "receipts_root",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "miner",
									"type": "String",
									"physicalType": "UTF8"
								},
								"sink": {
									"name": "miner",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "difficulty",
									"type": "Int64",
									"physicalType": "INT64"
								},
								"sink": {
									"name": "difficulty",
									"type": "Int64",
									"physicalType": "bigint"
								}
							},
							{
								"source": {
									"name": "extra_data",
									"type": "String",
									"physicalType": "UTF8"
								},
								"sink": {
									"name": "extra_data",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "size",
									"type": "Int32",
									"physicalType": "INT32"
								},
								"sink": {
									"name": "size",
									"type": "Int32",
									"physicalType": "int"
								}
							},
							{
								"source": {
									"name": "gas_limit",
									"type": "Int64",
									"physicalType": "INT64"
								},
								"sink": {
									"name": "gas_limit",
									"type": "Int64",
									"physicalType": "bigint"
								}
							},
							{
								"source": {
									"name": "gas_used",
									"type": "Int64",
									"physicalType": "INT64"
								},
								"sink": {
									"name": "gas_used",
									"type": "Int64",
									"physicalType": "bigint"
								}
							},
							{
								"source": {
									"name": "timestamp",
									"type": "Int64",
									"physicalType": "INT64"
								},
								"sink": {
									"name": "timestamp",
									"type": "Int64",
									"physicalType": "bigint"
								}
							},
							{
								"source": {
									"name": "transactions_len",
									"type": "Int32",
									"physicalType": "INT32"
								},
								"sink": {
									"name": "transactions_len",
									"type": "Int32",
									"physicalType": "int"
								}
							},
							{
								"source": {
									"name": "uncles_len",
									"type": "Int32",
									"physicalType": "INT32"
								},
								"sink": {
									"name": "uncles_len",
									"type": "Int32",
									"physicalType": "int"
								}
							},
							{
								"source": {
									"name": "base_fee_per_gas",
									"type": "Int64",
									"physicalType": "INT64"
								},
								"sink": {
									"name": "base_fee_per_gas",
									"type": "Int64",
									"physicalType": "bigint"
								}
							},
							{
								"source": {
									"name": "mix_hash",
									"type": "String",
									"physicalType": "UTF8"
								},
								"sink": {
									"name": "mix_hash",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "nephew",
									"type": "Int64",
									"physicalType": "INT64"
								},
								"sink": {
									"name": "nephew",
									"type": "Int64",
									"physicalType": "bigint"
								}
							},
							{
								"source": {
									"name": "uncle_index",
									"type": "Int32",
									"physicalType": "INT32"
								},
								"sink": {
									"name": "uncle_index",
									"type": "Int32",
									"physicalType": "int"
								}
							}
						],
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "ds_Parquet",
						"type": "DatasetReference",
						"parameters": {
							"tgt_filename": "rag.parquet",
							"Directory": {
								"value": "@pipeline().parameters.datalake_folder",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "Generic_Dataset_Table_DS",
						"type": "DatasetReference",
						"parameters": {
							"pmTableName": {
								"value": "@pipeline().parameters.table_name",
								"type": "Expression"
							},
							"pmServerName": {
								"value": "@pipeline().parameters.db_server_name",
								"type": "Expression"
							},
							"pmDbName": {
								"value": "@pipeline().parameters.db_name",
								"type": "Expression"
							},
							"pmUserName": {
								"value": "@pipeline().parameters.db_user_name",
								"type": "Expression"
							},
							"pmPassword": {
								"value": "@pipeline().parameters.db_password",
								"type": "Expression"
							}
						}
					}
				]
			}
		],
		"parameters": {
			"storage_table": {
				"type": "string",
				"defaultValue": "storage"
			},
			"datalake_folder": {
				"type": "string",
				"defaultValue": "MY_Parquet"
			},
			"table_name": {
				"type": "string",
				"defaultValue": "rag_parquet"
			},
			"db_name": {
				"type": "string",
				"defaultValue": "DUDMFCT"
			},
			"db_user_name": {
				"type": "string",
				"defaultValue": "WELL_FCT"
			},
			"db_password": {
				"type": "string",
				"defaultValue": "Admin@123"
			},
			"db_server_name": {
				"type": "string",
				"defaultValue": "dudmfct.database.windows.net"
			}
		},
		"folder": {
			"name": "Final"
		},
		"annotations": [],
		"lastPublishTime": "2022-03-21T02:01:34Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}