{
	"name": "df_scd2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "sourcefile"
				},
				{
					"dataset": {
						"referenceName": "DS_AZ_Sql",
						"type": "DatasetReference"
					},
					"name": "selmaxsurrtarget"
				},
				{
					"dataset": {
						"referenceName": "DS_AZ_Sql",
						"type": "DatasetReference"
					},
					"name": "targetSrc"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_AZ_Sql",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "DS_AZ_Sql",
						"type": "DatasetReference"
					},
					"name": "sink2",
					"rejectedDataLinkedService": {
						"referenceName": "LS_BlobStorage",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "selectrequired"
				},
				{
					"name": "joinmaxkeydata"
				},
				{
					"name": "joinwithtarget"
				},
				{
					"name": "keyMatching"
				},
				{
					"name": "salaryjoin"
				},
				{
					"name": "split"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as short,",
				"          ename as string,",
				"          sal as short,",
				"          dept as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false) ~> sourcefile",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select max(empsurrkey) surr_key from emp',",
				"     format: 'query') ~> selmaxsurrtarget",
				"source(output(",
				"          empsurrkey as integer,",
				"          empid as integer,",
				"          ename as string,",
				"          sal as integer,",
				"          fromdate as date,",
				"          todate as date,",
				"          isactive as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> targetSrc",
				"sourcefile select(mapColumn(",
				"          srcempid = empid,",
				"          srcename = ename,",
				"          srcsal = sal",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectrequired",
				"selectrequired, selmaxsurrtarget join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinmaxkeydata",
				"joinmaxkeydata, targetSrc join(srcempid == empid,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinwithtarget",
				"joinwithtarget split(srcempid==empid,",
				"     disjoint: false) ~> keyMatching@(matchingdata, notmatcheced)",
				"keyMatching@matchingdata, targetSrc join(keyMatching@matchingdata@sal == targetSrc@sal,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> salaryjoin",
				"salaryjoin split(srcsal== targetSrc@sal,",
				"     disjoint: false) ~> split@(salmatching, salnotmatched)",
				"split@salmatching derive(isactive = 0,",
				"          todate = currentDate()) ~> derivedColumn1",
				"keyMatching@notmatcheced sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          empid = srcempid,",
				"          ename = keyMatching@notmatcheced@ename,",
				"          sal = keyMatching@notmatcheced@sal",
				"     )) ~> sink1",
				"split@salnotmatched sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     errorHandlingOption: 'allErrors',",
				"     transactionCommit: 'batch',",
				"     reportSuccessOnError: true,",
				"     mapColumn(",
				"          empid = srcempid,",
				"          ename = srcename,",
				"          sal = srcsal",
				"     )) ~> sink2"
			]
		}
	}
}