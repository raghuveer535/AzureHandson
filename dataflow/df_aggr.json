{
	"name": "df_aggr",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText2",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "flowlet1",
					"flowlet": {
						"referenceName": "fl_aggr",
						"type": "DataFlowReference"
					}
				},
				{
					"name": "lookup1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     filename as string,",
				"     containername as string",
				"}",
				"source(output(",
				"          empid as short,",
				"          ename as string,",
				"          sal as short,",
				"          dept as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          empid as short,",
				"          ename as string,",
				"          sal as short,",
				"          dept as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source1 compose(mapColumn(",
				"          empid,",
				"          name = ename,",
				"          salary = sal,",
				"          department = dept",
				"     ),",
				"     composition: 'fl_aggr') ~> flowlet1@(output1)",
				"flowlet1@output1, source2 lookup(department == dept,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}